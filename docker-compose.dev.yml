version: '3'
services:
  search-service:
    container_name: search-container
    image: dhammanava-search-image
    build:
      context: ./search-esdb-service
    environment:
      ESDB_URL: http://elastic-db:9200
      ESDB_USERNAME: ${ELASTIC_USERNAME}
      ESDB_PASSWORD: ${ELASTIC_PASSWORD}
      FRONTEND_URL: http://frontend:5173
    restart:
      always
    volumes:
      - ./data:/app/datasource
    ports:
      - 8081:8081
    depends_on:
      - elastic-db
    networks:
      - backbone

  elastic-db: 
    container_name: elastic-container
    image: dhammanava-elastic-image
    build:
      context: ./elastic
    environment: 
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./volumes/database/elastic:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - backbone

  frontend:
    image: dhammanava-frontend-image
    container_name: frontend-container
    build:
      context: ./frontend
    ports:
      - 5173:8080
    restart:
      always
    networks:
      - backbone

  auth-service:
    container_name: auth-container
    image: dhammanava-auth-image:latest
    build:
      context: ./auth-service
    environment:
      - FRONTEND_URL=http://frontend:5173
      - JWT_KEY=${JWT_KEY} 
      - DATABASE_HOST=auth-db
      - DATABASE_USER=${AUTH_DB_USER}
      - DATABASE_PASSWORD=${AUTH_DB_PASSWORD}
      - EMAIL_SENDER_EMAIL=${SENDER_EMAIL}
      - EMAIL_SENDER_PASSWORD=${SENDER_PASSWORD}
      - LINK_URL=${LINK_URL}
      - SUPER_ADMIN_PASSWORD=${SUPER_ADMIN_PASSWORD}
      - SUPER_ADMIN_EMAIL=${SUPER_ADMIN_EMAIL}
      - SUPER_ADMIN_USERNAME=${SUPER_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - USER_PASSWORD=${USER_PASSWORD}
      - USER_EMAIL=${USER_EMAIL}
    ports:
      - 8082:8082
    restart:
      always
    depends_on:
      - auth-db
    networks:
      - backbone

  auth-db:
    image: postgres:latest
    container_name: auth-postgres-container
    environment:
      POSTGRES_DB: Authen
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    ports:
      - 5432:5432
    restart:
      always
    volumes:
      - ./auth-db:/docker-entrypoint-initdb.d
      - ./volumes/database/auth:/var/lib/postgresql/data
    networks:
      - backbone
    
  data-service:
    container_name: data-container
    image: dhammanava-data-image
    build:
      context: ./data-management-service
    environment:
       FRONTEND_URL: http://frontend:5173
       MONGO_DB_HOST: data-db
       MONGO_DB_PORT: 27017
       MONGO_DB_USERNAME: ${DATA_MNGMNT_DB_USER}
       MONGO_DB_PASSWORD: ${DATA_MNGMNT_DB_PASSWORD}
       MONGO_DB_NAME: record
    ports:
      - 8083:8083
    restart:
      always
    depends_on:
      - data-db
    networks:
      - backbone

  data-db: 
    image: mongo:4.4
    container_name: data-mongo-container
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: record
      MONGO_INITDB_ROOT_USERNAME: ${DATA_MNGMNT_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DATA_MNGMNT_DB_PASSWORD}
    restart:
      always
    volumes:
      - ./volumes/database/mongo-data:/data/db
    networks:
      - backbone

  nginx : 
    image: nginx:latest
    container_name: nginx-container
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - search-service
      - auth-service
      - data-service
      - frontend
    networks:
      - backbone
      
networks:
  backbone:
    driver: bridge